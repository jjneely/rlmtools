A short cut method to trusted vs untrusted Linux Realm Kit machines.  The
primary goal is to distribute secret keys to trusted clients.

1) Target machine requests a kickstart from web-kickstart.  We have a list of
admin approved machines in AFS.  If machine checks out we record in a MySQL
database provided by ITD its IP and a timestamp.  This DB also has room to
store a public encryption key.  The kickstart request must come from anaconda.

2) Via a cron.update run the system will run a program from AFS that will
request registration if the client is configured for support.  The server 
will check that the client machine has requested a kickstart and been 
approved by web-kickstart within a certain time frame, say 2 hours.  (This 
time frame must account for time to install and cron job frequency.)

3) The client will generate a public/private key pair as part of the 
registration process.  The public key is passed to the server and stored in 
the MySQL database for later use.  The server does not accept this key
and the complete registration process if the MySQL database shows that this
machine has already been registered.

4) The same cron job updates the encryption key used to fetch root 
passwords and user lists if that file is not present.  This program
will make a request to a server for the key and the server will send back the
key that is encrypted with the public key from the MySQL database and
signed by a secret Realm Linux key.  The client will verify the signature
before accepting the encrypted file.

Technical Details:

1) Anaconda does not identify itself in the HTTP headers it sends when
requesting a kickstart file.  req.headers_in has one key the "Host" or the
machine the request for the kickstart is sent to.  No User-Agent.  I mean, it
really does send nothing.  How do we identify anaconda?  Let's check for the
existance of the User-Agent header.  If its not there assume that we are
dealing with anaconda and I will file a bug to get anaconda to supply this
information.  This will keep most anything else from fooling web-kickstart
into thinking that a browser is a client wanting to install.

As of Fedora Core, Anaconda does send back some more useful header 
information.  Web-kickstart has been updated to accept either situation.

2) Communication between client machine and servers should use XMLRPC.  (Not
for the kickstart.)  SSL'd for added security.

3) Old entries must be deleted regularly from the MySQL DB.  To select
entries inactive for more than 30 days we do a:

    select hostname from realmlinux where 
    TO_DAYS(NOW()) - TO_DAYS(lastcheck) > 30;

Also we must clear up machines that installed but never registered.  In this
case the value for lastcheck will be NULL:

    select hostname from realmlinux where 
    TO_DAYS(NOW()) - TO_DAYS(installdate) > 30 and lastcheck is NULL;

The proper delete commands should be obvious from the above select 
statements.

4) Some extra error checking needs to be added.  We should check for
socket.error: (104, 'Connection reset by peer') in the getRPCObject
function.  Probably a few others.

